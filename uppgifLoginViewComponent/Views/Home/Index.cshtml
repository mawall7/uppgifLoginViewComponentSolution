@*@model IEnumerable<uppgifLoginViewComponent.Models.Student>*@
@model uppgifLoginViewComponent.Models.ViewModels.IndexViewModel
@*@{
        ViewData["Title"] = "Home Page";
    }*@
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">

@section Scripts {

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://use.fontawesome.com/3c66019ee4.js"></script>

    @*dropzone ok :) *@
    @*<meta charset="UTF-8">
        <title>Dropzone JS tutorial</title>
        <script src="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone-min.js"></script>
        <link href="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone.css" rel="stylesheet" type="text/css" />


        <form id="my-awesome-dropzone" class="dropzone" action="/Home/Upload" method="post" enctype="multipart/form-data">
            <div class="dropzone-previews"></div>
             this is were the previews should be shown.
             Now setup your input fields

            <button type="submit">Submit data and files!</button>
        </form>
        <script src="dropzone-custom.js"></script>
        <script>
            const dz = new Dropzone(".dropzone", {
                // The configuration we've talked about above
                url: "/home/Upload",
               autoProcessQueue: false,
                uploadMultiple: false,
                parallelUploads: 100,
                maxFiles: 100,
                // The setting up of the dropzone
                init: function () {
                    var myDropzone = this;
                    // First change the button to actually tell Dropzone to process the queue.
                    this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                        // Make sure that the form isn't actually being sent.
                        e.preventDefault();
                        e.stopPropagation();
                        myDropzone.processQueue();
                    });
                    // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                    // of the sending event because uploadMultiple is set to true.
                    this.on("sendingmultiple", function () {
                        // Gets triggered when the form is actually being sent.
                        // Hide the success button or the complete form.
                    });
                    this.on("successmultiple", function (files, response) {
                        // Gets triggered when the files have successfully been sent.
                        // Redirect user or notify of success.
                    });
                    this.on("errormultiple", function (files, response) {
                        // Gets triggered when there was an error sending the files.
                        // Maybe show form again, and notify user of error
                    });
                }
            });
        </script>*@


    @*</div>*@



    <

    @*<div @Html.Partial("_Modal")></div>*@


    @*<div @Html.Partial("_Students", Model)*@ @*asp-controller="Home" asp-action="StudentsPartial"*@>@*</div>*@
    <p class="text-primary">
    </p>

   @*.fa fa-floppy-o fa-lg {color: blue;}*@
    <div @Html.Partial("_Students", Model)></div>

}


















