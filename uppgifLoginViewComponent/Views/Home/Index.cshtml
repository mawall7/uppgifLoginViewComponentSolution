@using uppgifLoginViewComponent.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@using uppgifLoginViewComponent.Data
@using uppgifLoginViewComponent.Models.ViewModels
@using uppgifLoginViewComponent.ViewComponents
@*@model IEnumerable<uppgifLoginViewComponent.Models.Student>*@
@model uppgifLoginViewComponent.Models.ViewModels.IndexViewModel
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject StudentInfoHelp Studenthelp
@inject SignInManager<User> SigninManager

   


@if (!SigninManager.IsSignedIn(User))
{
<body style="background-image: url('https://thumbs.dreamstime.com/z/high-school-college-students-studying-reading-together-high-school-college-students-studying-reading-together-105156570.jpg?w=992'); background-size:cover"></body>
<div id="featuredCourses" class="h5 text-center">Featured Courses
<h5>@await Component.InvokeAsync("FeauturedCourses")</h5>
   @*<p> await @Component.InvokeAsync("FeauturedCourses")</P>;*@
    @*@foreach (var item in Courses) { }*@ 
       
</div>
}


@{if (User.IsInRole("Teacher"))
    { //fixa landingpage innan index med meny login

        @* for asp-action returnerar TestAjax partial*@
        <form asp-action="OnSubmitAjax" asp-controller="Home"
              data-ajax="true"
              data-ajax-metod="POST"
              data-ajax-mode="replace"
              data-ajax-update="#info">

            <div id="jsupdate" class="form-group mt-1">
               

                <label class="custom-control-label display-4">Select Student</label>
                <select id="studselect" class="form-control" asp-items="Model.StudentsSelect" name="StudentId" onchange="LoggSelectlistvalue()">
                    <option value="" selected="selected" disabled="disabled">--select student--</option>
                </select>
                <input type="hidden" name="StudentId" />
            </div>


            <input type="submit" value="Submit" name="btnSubmit" class="btn btn-dark">
        </form>


    }
    else if (User.IsInRole("Student"))
    {

        var studemail = User.Identity.Name.ToString();

        var studhelp = Studenthelp; StudentInfoViewModel studentmodel = studhelp.GetStudentInfo(studemail);
        <span>Student</span>
        @*<div> @await Html.PartialAsync("Testajax", studentmodel)</div> //använd helper egen helper passar nog för då kan man få in parameter ? eller konstruktor*@
        <div> @await Html.PartialAsync("Testajax", studentmodel)</div>


    }
    else
    { @*<span>role not set</span>*@
    }



<div id="info">
       
    </div>}
@*<div>@{await Html.RenderPartialAsync("_StudentInfo", Model.Student = Model.Students.Where(s=> s.ID == 1).FirstOrDefault());}</div>*@





@*<script>
    let span = document.getElementById("info");
    let text;
    window.onload = function () { span.innerHTML = ""; }


   setInterval(function() { text = @User.IsInRole("Teacher").ToString().ToLower(); if (text == "false") { span.innerHTML = "Show Student info" } else if(text == "true") (span.innerHTML = "Show Teacher info") }, 2000);

      function Success() {
         
      }</script>*@
<meta charset="UTF-8">

<link href="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone.css" rel="stylesheet" type="text/css" />


@*action="~/Home/Upload?Id=1"*@
@if (SigninManager.IsSignedIn(User))
{
<div class="col-6 w-50 mx-auto text-center"> Submit Assignment for Course > <span id="submit">Select Course</span></div>

<div class="row">
    <div id="dropzone" class="w-50 mx-auto">
        <form id="my-awesome-dropzone" class="dropzone form-control-file bg-secondary" action="/Home/Upload?Id=5" method="post" enctype="multipart/form-data">
            <div class="dz-message needscklick">
                Drop files here of click to upload.
            </div>
            @*in TestAjax*@

        </form>
    </div>
</div>
}
</p>

@section Scripts{
    @*scripts delflyttad från ovanför tag id=info *@
    <script>

    //get accordian button coursename oncclick använd till dropdown för att kolla vilken kurs som är vald för parameter till Assignment Course
    let accordianbtns = document.getElementsByClassName("accordion-button");
    let coursename;
    console.log("buttonclasslist", accordianbtns);

        function GetCourseNameOnClick(courseName) //anropas från TestAjax
    {
        coursename = courseName;
        console.log("coursename", coursename);
        };

        function ShowCourseAtDropzone(cname)
        {
            $("#submit").html(cname + "?");
        }

    //fungerar hämta buttons från TestAjax
    let ar = Array.from(accordianbtns); console.log("arra", ar);
    setInterval(function () {
        let arr = Array.from(accordianbtns); console.log("viewbag", @ViewBag.infofrompartial); console.log("val", arr); /*console.log("arr0.innerText", arr[0].innerText)*/
    }, 6000);

    //obs fungerar ej eftersom knapparna tas fram med ajax;
    //behöver ? köra en callback på när knapparna finns och då sätta dit eventlistener:
    //69 ill 75 fungerarde ändå inte

    //.forEach(function (element) {
    //    console.log("btelement.innertext", element.innerHTML);
    //    console.log("btnelement.innerhtml", element.innerText);
    //});

    //for (let i = 0; accordianbtns.length; i++) {
    //    console.log("thisval", accordianbtns[i]);
    //}

    //for (let i of accordianbtns) {
    //       console.log("value is", accordianbtns[i].ariaExpanded);
    //    }



    //to do onclick fungerar ej
    //let courseName;

    //for (let i of accordianbtns) {
    //    console.log("item", accordianbtns[i]);
    //}
    //for (var i = 0; i < accordianbtns.length; i++) {
    //    var item = accordianbtns[i].value;
    //    console.log("courseit[i]", accordianbtns.item(i));
    //    console.log("courseit[i].value", accordianbtns[i].value);
    //    item.addEventListener("click", function () {
    //        courseName = item.innerHTML;
    //        console.log("item.innerHTML", courseName);
    //    })
    //}

    function UpdateSelect() { //används ej är för att nollställa studselect till --choose student--
        document.getElementById("jsupdate").innerHTML = "";
        let mainelement = document.getElementById("jsupdate");
        let select = document.createElement("select");

        select.setAttribute("id", "studselect");
        select.setAttribute("name", "StudentId");
        select.classList.add("form-control");
        studs = [];
        var opt = document.createElement("option");
        var studentsobjs = @Json.Serialize(Model);
        console.log("studentsobject: ", studentsobjs);
        var students = studentsobjs.students;
        console.log("students", students); //to do onsdag


        for (let student in students["$values"]) { //student blir = 0 , 1 listindex varför ?
            console.log("stu", student);
            console.log("stu2", students["$values"][student])
            var studentjobj = students["$values"][student];
            console.log("studobj", studentjobj);
            BuildSelectOptions(studentjobj);
        }

        function BuildSelectOptions(student)
        {
            var opt = document.createElement("option");
            opt.text = student["firstMidName"];
            opt.value = student["id"];
            select.appendChild(opt);
        }
                var value = students["$values"][0]["lastName"];
                console.log(value);
                console.log("LName--", value);

    }

    </script>

    @*scripts del flyttad från ovanför tag id=info 1*@

    <script src="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone-min.js"></script>
    <script src="dropzone-custom.js"></script>

    <script>
        setInterval(function () {
            console.log("coursen", coursename);

        }, 1000);

        let buttons;
        let selectvalue;
        let myurl;
        function LoggSelectlistvalue() {
            selectvalue = document.getElementById("studselect").value;
            console.log("value=", selectvalue);
            myurl = "/home/Upload?Id=" + selectvalue;
        }


        const dz = new Dropzone(".dropzone", {


            // The configuration we've talked about above
            url: "/Home/Upload/", //tog bort det för att använda action = i form taggen i stället för att få in id
            autoProceshQueue: false,
            uploadMultiple: false,
            parallelUploads: 100,
            maxFiles: 100,
            params: function params(files, xhr, chunk) { return { 'Id': selectvalue, 'CourseName': coursename }; },

            /* params: {'Id': 1},*/

            // The setting up of the dropzone
            init: function () {
                var myDropzone = this;

                this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                    // Make sure that the form isn't actually being sent.
                    e.preventDefault();
                    e.stopPropagation();
                    myDropzone.processQueue()
                });
                //// First change the button to actually tell Dropzone to process the queue.
                //this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                //    // Make sure that the form isn't actually being sent.
                //    e.preventDefault();
                //    e.stopPropagation();
                //    myDropzone.processQueue();
                //});
                //// Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                //// of the sending event because uploadMultiple is set to true. < changed to false
                //this.on("sendingmultiple", function () {
                //    // Gets triggered when the form is actually being sent.
                //    // Hide the success button or the complete form.
                //});
                //this.on("successmultiple", function (files, response) {
                //    // Gets triggered when the files have successfully been sent.
                //    // Redirect user or notify of success.
                //});
                //this.on("errormultiple", function (files, response) {
                //    // Gets triggered when there was an error sending the files.
                //    // Maybe show form again, and notify user of error
                //});
            }
        });
                                   

    </script>
}

