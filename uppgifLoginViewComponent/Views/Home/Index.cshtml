@using uppgifLoginViewComponent.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@using uppgifLoginViewComponent.Data
@using uppgifLoginViewComponent.Models.ViewModels
@using uppgifLoginViewComponent.ViewComponents
@*@model IEnumerable<uppgifLoginViewComponent.Models.Student>*@
@model uppgifLoginViewComponent.Models.ViewModels.IndexViewModel
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject StudentInfoHelp Studenthelp
@inject SignInManager<User> SigninManager

@*<title>Bootstrap Example</title>*@

@*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>*@




<script>
    //not used at the moment
    
    $j(document).ready(function (e) {

        let selectoption = $("#studselect").val(); //studentid
        $("#studselect").on('change', function (e) {
            var url = "/Home/OnSubmitAjax/StudentId=" + selectoption;
            $.ajax({
                type: "POST",
                url: url,
                data: $("#indexform").serialize(),
                success: function (data) {
                    $(".tnxforate").html(data)
                },
                failure: function () { console.log("javasscript ajaxcall on change for studselect failed" + e.value); }
            });
        });
    });


</script>


@{TempData.Keep("GradechangeInfo");}
@{TempData.Keep("GradechangeEnrollmentId");}

<div id="myindex">



    @if (!SigninManager.IsSignedIn(User))
    {
        <body style="background-image: url('https://thumbs.dreamstime.com/z/high-school-college-students-studying-reading-together-high-school-college-students-studying-reading-together-105156570.jpg?w=992'); background-size:cover">
        </body>
        <div id="featuredCourses" class="h5 text-center">
            Featured Courses
            <h5>@await Component.InvokeAsync("FeauturedCourses")</h5>
        </div>
        <div>
            <h1>pdf test below- nästa steg är att kunna ladda ner och upp pdf från databasen</h1>
            <object data="~/files/fortum_september.pdf" type="application/pdf" width="1000px" height="500px">
            </object>
        </div>

    }

    @{ if (TempData["Message"] != null)
        {
            <p class="alert-info">@TempData["Message"]</p>
        }
    }
    @{TempData?.Remove("Message"); }

    @{if (User.IsInRole("Teacher"))
        {
            <p class="alert-info">@ViewBag.AssignmentUpdated</p>
            @* for asp-action returnerar TestAjax partial*@
            @*<form id="indexform" method="post" action="">*@
            <form id="indexform" asp-action="OnSubmitAjax" asp-controller="Home"
                  data-ajax="true"
                  data-ajax-metod="POST"
                  data-ajax-mode="replace"
                  data-ajax-update="#info">

                <div id="jsupdate" class="form-group mt-1 border border-dark rounded p-5">


                    @*<label class="custom-control-label h5">Select Student</label>*@
                    <p>Select Student</p>
                    <div class="bg-light clearfix">
                        <select class="float-left form-select" id="studselect" title="Students" asp-items="Model.StudentsSelect" name="StudentId" onchange="LoggSelectlistvalue()">


                            <option value="" selected="selected" disabled="disabled">--select student--</option>
                        </select>
                        <input type="hidden" name="StudentId" class="float-right" />



                        <input id="myformsubmit" type="submit" value="Submit" name="btnSubmit" class="btn btn-sm float-left" autocomplete="on">
                    </div>
                </div>
            </form>

            <div class="row mb-2">
                <div class="col-8 ml-1 border-1 border-dark h-100">
                    <h4 class="d-inline">
                        Add Course
                    </h4>
                    <a class="btn-light">
                        <i class="fa fa-plus" style="color:black">
                        </i>
                    </a>
                </div>
            </div>
            
            <h4 class="ml-1">Search/Edit an existing Course</h4>
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Enter Course Name "ria-describedby="button-addon2">
                <button class="btn btn-outline-secondary" type="button" id="button-addon2">Search Course</button>
            </div>


        }
        else if (User.IsInRole("Student"))
        {

            var studemail = User.Identity.Name.ToString();

            var studhelp = Studenthelp; StudentInfoViewModel studentmodel = studhelp.GetStudentInfo(studemail);


            <div> @await Html.PartialAsync("Testajax", studentmodel)</div>


        }
        else
        { @*<span>role not set</span>*@
    }


    //teacher login returnerar samma partial som student , Testajax men, teacher gör det via home controllern data-ajax attribut, som är deprecated, kan det vara anledningen till att bootstrap collapse bara fungerar för student?
    <div id="info">


    </div>

    }
    @*<div>@{await Html.RenderPartialAsync("_StudentInfo", Model.Student = Model.Students.Where(s=> s.ID == 1).FirstOrDefault());}</div>*@





    @*<script>
         let span = document.getElementById("info");
         let text;
         window.onload = function () { span.innerHTML = ""; }


        setInterval(function() { text = @User.IsInRole("Teacher").ToString().ToLower(); if (text == "false") { span.innerHTML = "Show Student info" } else if(text == "true") (span.innerHTML = "Show Teacher info") }, 2000);

           function Success() {

           }</script>*@
    <meta charset="UTF-8">

    <link href="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone.css" rel="stylesheet" type="text/css" />


    @* ----Dropzone --- action="~/Home/Upload?Id=1"*@
    @if (SigninManager.IsSignedIn(User))
    {
        //
        <!-- Button trigger modal -->
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
            Commit Assignment >
        </button>

        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                        <button id="dropzonemodal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="col-6 w-50 mx-auto text-center"> Submit Assignment for Course > <span id="submit">Select Course</span></div>

                        <div class="row">
                            <div visibility="visible" id="dropzone" class="w-50 mx-auto">
                                <form id="my-awesome-dropzone" class="dropzone form-control-file bg-secondary" action="/Home/Upload" method="post" enctype="multipart/form-data">
                                    @*action="/Home/Upload?Id=5"*@

                                    @*<div class="needscklick">
                                        </div>*@
                                    <button type="submit" title="mydropzonebtn" hidden="hidden">open file</button>

                                    @*in TestAjax here you can add button*@

                                </form>
                            </div>
                        </div>



                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </div>



        //
        <!--<div class="col-6 w-50 mx-auto text-center"> Submit Assignment for Course > <span id="submit">Select Course</span></div>

        <div class="row">
            <div visibility ="visible" id="dropzone" class="w-50 mx-auto">
                <form id="my-awesome-dropzone" class="dropzone form-control-file bg-secondary" action="/Home/Upload" method="post" enctype="multipart/form-data">-->
        @*action="/Home/Upload?Id=5"*@

        @*<div class="needscklick">
            </div>*@
        <!--<button type="submit" title="mydropzonebtn" hidden="hidden">open file</button>-->

        @*in TestAjax here you can add button*@

        <!--</form>
            </div>
        </div>-->
    }
</div>


@section Scripts{
    @*scripts delflyttad från ovanför tag id=info *@


    <script>
        ToggleDropZone();
      
        function SubmitForm()
        {
            $j("#myformsubmit").submit();

        }

    //get accordian button coursename oncclick använd till dropdown för att kolla vilken kurs som är vald för parameter till Assignment Course
    let accordianbtns = document.getElementsByClassName("accordion-button");
    let coursename;
    console.log("buttonclasslist", accordianbtns);

        function GetCourseNameOnClick(courseName) //anropas från TestAjax
        {
        coursename = courseName;
        console.log("coursename", coursename);
        };
        
        function ShowCourseAtDropzone(cname)
        {
            ToggleDropZone();
            $("#submit").html(cname + "?");
        }

       /* $(document).ready(function () {*/
            function ToggleDropZone() {
                
               $("#dropzone").toggle();
            }
 /*       });*/


        

    //fungerar hämta buttons från TestAjax
    let ar = Array.from(accordianbtns); console.log("arra", ar);
    setInterval(function () {
        let arr = Array.from(accordianbtns); console.log("viewbag", @ViewBag.infofrompartial); console.log("val", arr); /*console.log("arr0.innerText", arr[0].innerText)*/
    }, 6000);





    function UpdateSelect() { //används ej är för att nollställa studselect till --choose student--
        document.getElementById("jsupdate").innerHTML = "";
        let mainelement = document.getElementById("jsupdate");
        let select = document.createElement("select");

        select.setAttribute("id", "studselect");
        select.setAttribute("name", "StudentId");
        select.classList.add("form-control");
        studs = [];
        var opt = document.createElement("option");
        var studentsobjs = @Json.Serialize(Model);
        console.log("studentsobject: ", studentsobjs);
        var students = studentsobjs.students;
        console.log("students", students); 


        for (let student in students["$values"]) { //student blir = 0 , 1 listindex varför ?
            console.log("stu", student);
            console.log("stu2", students["$values"][student])
            var studentjobj = students["$values"][student];
            console.log("studobj", studentjobj);
            BuildSelectOptions(studentjobj);
        }

        function BuildSelectOptions(student)
        {
            var opt = document.createElement("option");
            opt.text = student["firstMidName"];
            opt.value = student["id"];
            select.appendChild(opt);
        }
                var value = students["$values"][0]["lastName"];
                console.log(value);
                console.log("LName--", value);

    }

    </script>

    @*scripts del flyttad från ovanför tag id=info 1*@

    <script src="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone-min.js"></script>
    @*<script src="dropzone-custom.js"></script>*@

    <script>
        setInterval(function () {
            console.log("coursen", coursename);

        }, 1000);

        let buttons;
        let selectvalue;
        let myurl;
        function LoggSelectlistvalue() {
            selectvalue = document.getElementById("studselect").value;
            console.log("value=", selectvalue);
            myurl = "/home/Upload?Id=" + selectvalue;
            console.log(myurl);
        }

        if (document.getElementById('dropzone')) {
            const dz = new Dropzone(".dropzone", {


                //url: "/Home/Upload/", //tog bort det för att använda action = i form taggen i stället för att få in id
                autoProceshQueue: false,
                uploadMultiple: false,
                parallelUploads: 100,
                maxFiles: 100,
                params: function params(files, xhr, chunk) { return { 'Id': selectvalue, 'CourseName': coursename }; },

                /* params: {'Id': 1},*/

                // The setting up of the dropzone
                init: function () {
                    var myDropzone = this;

                    this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                        // Make sure that the form isn't actually being sent.
                        e.preventDefault();
                        e.stopPropagation();
                        myDropzone.processQueue()
                    });
                    //// First change the button to actually tell Dropzone to process the queue.
                    //this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                    //    // Make sure that the form isn't actually being sent.
                    //    e.preventDefault();
                    //    e.stopPropagation();
                    //    myDropzone.processQueue();
                    //});
                    //// Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                    //// of the sending event because uploadMultiple is set to true. < changed to false
                    //this.on("sendingmultiple", function () {
                    //    // Gets triggered when the form is actually being sent.
                    //    // Hide the success button or the complete form.
                    //});
                    //this.on("successmultiple", function (files, response) {
                    //    // Gets triggered when the files have successfully been sent.
                    //    // Redirect user or notify of success.
                    //});
                    //this.on("errormultiple", function (files, response) {
                    //    // Gets triggered when there was an error sending the files.
                    //    // Maybe show form again, and notify user of error
                    //});
                }
            });
        }


    </script>

}

